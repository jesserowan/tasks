{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TaskForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","onCreate","state","setState","task","description","isComplete","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","target","childNodes","Symbol","iterator","next","done","ele","value","classList","contains","err","return","handleName","handleDescription","react_default","a","createElement","onSubmit","className","type","name","onChange","Component","App","_this2","createTask","t","toConsumableArray","tasks","id","latest_id","push","console","log","i","splice","_this3","width","map","key","onClick","handleClick","bind","deleteTask","App_TaskForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b51f72b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass TaskForm extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      task: '',\n      description: '',\n      isComplete: false\n    }\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.onCreate(this.state)\n    this.setState({\n      task: '',\n      description: '',\n      isComplete: false\n    })\n    for(let ele of e.target.childNodes){\n      if(ele.classList.contains(\"form-control\")){\n        ele.value = \"\";\n      }\n    }\n  }\n  handleName = (e) => {\n    this.setState({\n      task: e.target.value\n    })\n  }\n  handleDescription = (e) => {\n    this.setState({\n      description: e.target.value\n    })\n  }\n\n  render () {\n    return (\n      <form onSubmit = {this.handleSubmit}>\n        <label className=\"form-group\">Task</label>\n        <input className=\"form-control\" type=\"text\" name=\"taskName\" onChange={this.handleName} />\n\n        <label className=\"form-group\">Description</label>\n        <input className=\"form-control\" type=\"text\" name=\"taskDescription\" onChange={this.handleDescription} />\n\n        <input className=\"btn btn-outline-primary a\" type=\"submit\" value=\"Add Task\" />\n      </form>\n    )\n  }\n}\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      latest_id: 4,\n      tasks: [\n        {id: 1, task: \"Learn React\", description: \"states, props, jsx, whatever\", isComplete: false},\n        {id: 2, task: \"climb a mountain\", description: \"mount killimanjaro\", isComplete: false},\n        {id: 3, task: \"white water raft the colorado river\", description: \"very wet\", isComplete: false}\n      ]\n    }\n  }\n\n  handleClick(id, e) {\n    let t = [...this.state.tasks];\n    for (let i in t) {\n      if (t[i].id === id){\n        t[i].isComplete = !t[i].isComplete;\n      }\n    }\n    this.setState({tasks: t});\n  }\n\n  deleteTask(id, e){\n    let t = [...this.state.tasks];\n    for (let i in t){\n      if(t[i].id === id){\n        t.splice(i, 1);\n      }\n    }\n    this.setState({tasks: t});\n  }\n\n  createTask = (task) => {\n    let t = [...this.state.tasks];\n    task.id = this.state.latest_id;\n    this.setState({\n      latest_id: task.id + 1\n    });\n    t.push(task);\n    this.setState({\n      tasks: t\n    });\n    console.log('inside of app', task);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>React Tasks</h1>\n        <div className=\"table-div\">\n          <table>\n            <thead>\n              <tr>\n                <th>Task</th>\n                <th>Description</th>\n                <th>Status</th>\n                <th width=\"25%\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                this.state.tasks.map((task) =>\n                  <tr key={task.id}>\n                    <td>{task.task}</td>\n                    <td>{task.description}</td>\n                    <td>{\n                      (task.isComplete) ?\n                        <span>Complete</span> : <span>Incomplete</span>\n                    }</td>\n                    <td className=\"actions\">\n                      <button className=\"btn btn-outline-secondary\" onClick={this.handleClick.bind(this, task.id)}>\n                        Update\n                      </button>\n                      <button className=\"btn btn-outline-secondary\" onClick={this.deleteTask.bind(this, task.id)}>\n                        Delete\n                      </button>\n                    </td>\n                  </tr>\n                )\n              }\n            </tbody>\n          </table>\n          <div className=\"form-div\">\n            <TaskForm onCreate = {this.createTask}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}